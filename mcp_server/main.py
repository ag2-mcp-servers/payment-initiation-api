# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:54:55+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Header, Path
from pydantic import constr

from models import (
    File,
    OBErrorResponse1,
    OBWriteDomestic2,
    OBWriteDomesticConsent4,
    OBWriteDomesticConsentResponse5,
    OBWriteDomesticResponse5,
    OBWriteDomesticScheduled2,
    OBWriteDomesticScheduledConsent4,
    OBWriteDomesticScheduledConsentResponse5,
    OBWriteDomesticScheduledResponse5,
    OBWriteDomesticStandingOrder3,
    OBWriteDomesticStandingOrderConsent5,
    OBWriteDomesticStandingOrderConsentResponse6,
    OBWriteDomesticStandingOrderResponse6,
    OBWriteFile2,
    OBWriteFileConsent3,
    OBWriteFileConsentResponse4,
    OBWriteFileResponse3,
    OBWriteFundsConfirmationResponse1,
    OBWriteInternational3,
    OBWriteInternationalConsent5,
    OBWriteInternationalConsentResponse6,
    OBWriteInternationalResponse5,
    OBWriteInternationalScheduled3,
    OBWriteInternationalScheduledConsent5,
    OBWriteInternationalScheduledConsentResponse6,
    OBWriteInternationalScheduledResponse6,
    OBWriteInternationalStandingOrder4,
    OBWriteInternationalStandingOrderConsent6,
    OBWriteInternationalStandingOrderConsentResponse7,
    OBWriteInternationalStandingOrderResponse7,
    OBWritePaymentDetailsResponse1,
)

app = MCPProxy(
    contact={'email': 'ServiceDesk@openbanking.org.uk', 'name': 'Service Desk'},
    description='Swagger for Payment Initiation API Specification',
    license={
        'name': 'open-licence',
        'url': 'https://www.openbanking.org.uk/open-licence',
    },
    termsOfService='https://www.openbanking.org.uk/terms',
    title='Payment Initiation API',
    version='3.1.7',
    servers=[{'url': 'https://openbanking.org.uk'}, {'url': '/open-banking/v3.1/pisp'}],
)


@app.post(
    '/domestic-payment-consents',
    tags=['domestic_payment_consent_management', 'domestic_payment_processing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_domestic_payment_consents(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteDomesticConsent4 = ...,
):
    """
    Create Domestic Payment Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domestic-payment-consents/{ConsentId}',
    tags=['domestic_payment_consent_management', 'domestic_payment_processing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_domestic_payment_consents_consent_id(
    consent_id: str = Path(..., alias='ConsentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Domestic Payment Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domestic-payment-consents/{ConsentId}/funds-confirmation',
    tags=['domestic_payment_consent_management', 'domestic_payment_processing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_domestic_payment_consents_consent_id_funds_confirmation(
    consent_id: str = Path(..., alias='ConsentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Domestic Payment Consents Funds Confirmation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/domestic-payments',
    tags=['domestic_payment_processing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_domestic_payments(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteDomestic2 = ...,
):
    """
    Create Domestic Payments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domestic-payments/{DomesticPaymentId}',
    tags=['domestic_payment_processing', 'payment_detail_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_domestic_payments_domestic_payment_id(
    domestic_payment_id: str = Path(..., alias='DomesticPaymentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Domestic Payments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domestic-payments/{DomesticPaymentId}/payment-details',
    tags=['domestic_payment_processing', 'payment_detail_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_domestic_payments_domestic_payment_id_payment_details(
    domestic_payment_id: str = Path(..., alias='DomesticPaymentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Payment Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/domestic-scheduled-payment-consents',
    tags=[
        'domestic_payment_consent_management',
        'domestic_scheduled_payment_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_domestic_scheduled_payment_consents(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteDomesticScheduledConsent4 = ...,
):
    """
    Create Domestic Scheduled Payment Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domestic-scheduled-payment-consents/{ConsentId}',
    tags=[
        'domestic_payment_consent_management',
        'domestic_scheduled_payment_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_domestic_scheduled_payment_consents_consent_id(
    consent_id: str = Path(..., alias='ConsentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Domestic Scheduled Payment Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/domestic-scheduled-payments',
    tags=['domestic_scheduled_payment_management', 'domestic_payment_processing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_domestic_scheduled_payments(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteDomesticScheduled2 = ...,
):
    """
    Create Domestic Scheduled Payments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domestic-scheduled-payments/{DomesticScheduledPaymentId}',
    tags=['domestic_scheduled_payment_management', 'domestic_payment_processing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_domestic_scheduled_payments_domestic_scheduled_payment_id(
    domestic_scheduled_payment_id: str = Path(..., alias='DomesticScheduledPaymentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Domestic Scheduled Payments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domestic-scheduled-payments/{DomesticScheduledPaymentId}/payment-details',
    tags=[
        'domestic_payment_processing',
        'domestic_scheduled_payment_management',
        'payment_detail_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_payment_details_by_domestic_scheduled_payment_id(
    domestic_scheduled_payment_id: str = Path(..., alias='DomesticScheduledPaymentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Payment Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/domestic-standing-order-consents',
    tags=[
        'domestic_payment_consent_management',
        'domestic_standing_order_management',
        'domestic_scheduled_payment_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_domestic_standing_order_consents(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteDomesticStandingOrderConsent5 = ...,
):
    """
    Create Domestic Standing Order Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domestic-standing-order-consents/{ConsentId}',
    tags=['domestic_payment_consent_management', 'domestic_standing_order_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_domestic_standing_order_consents_consent_id(
    consent_id: str = Path(..., alias='ConsentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Domestic Standing Order Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/domestic-standing-orders',
    tags=[
        'domestic_standing_order_management',
        'domestic_payment_processing',
        'domestic_scheduled_payment_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_domestic_standing_orders(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteDomesticStandingOrder3 = ...,
):
    """
    Create Domestic Standing Orders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domestic-standing-orders/{DomesticStandingOrderId}',
    tags=[
        'domestic_standing_order_management',
        'domestic_payment_processing',
        'payment_detail_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_domestic_standing_orders_domestic_standing_order_id(
    domestic_standing_order_id: str = Path(..., alias='DomesticStandingOrderId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Domestic Standing Orders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domestic-standing-orders/{DomesticStandingOrderId}/payment-details',
    tags=['domestic_standing_order_management', 'payment_detail_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_payment_details_by_standing_order_id(
    domestic_standing_order_id: str = Path(..., alias='DomesticStandingOrderId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Payment Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/file-payment-consents',
    tags=['file_payment_consent_management', 'file_payment_processing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_file_payment_consents(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteFileConsent3 = ...,
):
    """
    Create File Payment Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/file-payment-consents/{ConsentId}',
    tags=['file_payment_consent_management', 'file_payment_processing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_file_payment_consents_consent_id(
    consent_id: str = Path(..., alias='ConsentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get File Payment Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/file-payment-consents/{ConsentId}/file',
    tags=['file_payment_consent_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_file_payment_consents_consent_id_file(
    consent_id: str = Path(..., alias='ConsentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get File Payment Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/file-payment-consents/{ConsentId}/file',
    tags=['file_payment_consent_management', 'file_payment_processing'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_file_payment_consents_consent_id_file(
    consent_id: str = Path(..., alias='ConsentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: File = ...,
):
    """
    Create File Payment Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/file-payments',
    tags=['file_payment_processing', 'file_payment_consent_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_file_payments(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteFile2 = ...,
):
    """
    Create File Payments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/file-payments/{FilePaymentId}',
    tags=[
        'file_payment_processing',
        'file_payment_consent_management',
        'payment_detail_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_file_payments_file_payment_id(
    file_payment_id: str = Path(..., alias='FilePaymentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get File Payments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/file-payments/{FilePaymentId}/payment-details',
    tags=['file_payment_processing', 'payment_detail_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_file_payments_file_payment_id_payment_details(
    file_payment_id: str = Path(..., alias='FilePaymentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Payment Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/file-payments/{FilePaymentId}/report-file',
    tags=[
        'file_payment_processing',
        'file_payment_consent_management',
        'payment_detail_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_file_payments_file_payment_id_report_file(
    file_payment_id: str = Path(..., alias='FilePaymentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get File Payments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/international-payment-consents',
    tags=[
        'international_payment_consent_management',
        'international_payment_processing',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_international_payment_consents(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteInternationalConsent5 = ...,
):
    """
    Create International Payment Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/international-payment-consents/{ConsentId}',
    tags=[
        'international_payment_consent_management',
        'international_payment_processing',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_international_payment_consents_consent_id(
    consent_id: str = Path(..., alias='ConsentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get International Payment Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/international-payment-consents/{ConsentId}/funds-confirmation',
    tags=[
        'international_payment_consent_management',
        'international_payment_processing',
        'payment_detail_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_international_payment_consents_consent_id_funds_confirmation(
    consent_id: str = Path(..., alias='ConsentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get International Payment Consents Funds Confirmation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/international-payments',
    tags=[
        'international_payment_consent_management',
        'international_payment_processing',
        'international_payment_scheduling',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_international_payments(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteInternational3 = ...,
):
    """
    Create International Payments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/international-payments/{InternationalPaymentId}',
    tags=[
        'international_payment_processing',
        'payment_detail_retrieval',
        'international_payment_consent_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_international_payments_international_payment_id(
    international_payment_id: str = Path(..., alias='InternationalPaymentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get International Payments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/international-payments/{InternationalPaymentId}/payment-details',
    tags=['international_payment_processing', 'payment_detail_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_payment_details_by_international_payment_id(
    international_payment_id: str = Path(..., alias='InternationalPaymentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Payment Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/international-scheduled-payment-consents',
    tags=[
        'international_payment_consent_management',
        'international_payment_scheduling',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_international_scheduled_payment_consents(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteInternationalScheduledConsent5 = ...,
):
    """
    Create International Scheduled Payment Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/international-scheduled-payment-consents/{ConsentId}',
    tags=[
        'international_payment_consent_management',
        'international_payment_scheduling',
        'payment_detail_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_international_scheduled_payment_consents_consent_id(
    consent_id: str = Path(..., alias='ConsentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get International Scheduled Payment Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/international-scheduled-payment-consents/{ConsentId}/funds-confirmation',
    tags=[
        'international_payment_consent_management',
        'international_payment_processing',
        'international_payment_scheduling',
        'payment_detail_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_international_scheduled_payment_funds_confirmation(
    consent_id: str = Path(..., alias='ConsentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get International Scheduled Payment Consents Funds Confirmation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/international-scheduled-payments',
    tags=[
        'international_payment_consent_management',
        'international_payment_processing',
        'international_payment_scheduling',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_international_scheduled_payments(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteInternationalScheduled3 = ...,
):
    """
    Create International Scheduled Payments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/international-scheduled-payments/{InternationalScheduledPaymentId}',
    tags=[
        'international_payment_processing',
        'international_payment_scheduling',
        'payment_detail_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_international_scheduled_payments(
    international_scheduled_payment_id: str = Path(
        ..., alias='InternationalScheduledPaymentId'
    ),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get International Scheduled Payments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/international-scheduled-payments/{InternationalScheduledPaymentId}/payment-details',
    tags=['international_payment_processing', 'payment_detail_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_payment_details_by_international_id(
    international_scheduled_payment_id: str = Path(
        ..., alias='InternationalScheduledPaymentId'
    ),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Payment Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/international-standing-order-consents',
    tags=[
        'international_payment_consent_management',
        'international_payment_processing',
        'international_payment_scheduling',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_international_standing_order_consents(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteInternationalStandingOrderConsent6 = ...,
):
    """
    Create International Standing Order Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/international-standing-order-consents/{ConsentId}',
    tags=[
        'international_payment_consent_management',
        'international_payment_processing',
        'international_payment_scheduling',
        'payment_detail_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_international_standing_order_consents_consent_id(
    consent_id: str = Path(..., alias='ConsentId'),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get International Standing Order Consents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/international-standing-orders',
    tags=[
        'international_payment_consent_management',
        'international_payment_processing',
        'international_payment_scheduling',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_international_standing_orders(
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_idempotency_key: constr(pattern=r'^(?!\s)(.*)(\S)$', max_length=40) = Header(
        ..., alias='x-idempotency-key'
    ),
    x_jws_signature: str = Header(..., alias='x-jws-signature'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
    body: OBWriteInternationalStandingOrder4 = ...,
):
    """
    Create International Standing Orders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/international-standing-orders/{InternationalStandingOrderPaymentId}',
    tags=[
        'international_payment_consent_management',
        'international_payment_processing',
        'international_payment_scheduling',
        'payment_detail_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_international_standing_orders(
    international_standing_order_payment_id: str = Path(
        ..., alias='InternationalStandingOrderPaymentId'
    ),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get International Standing Orders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/international-standing-orders/{InternationalStandingOrderPaymentId}/payment-details',
    tags=['international_payment_processing', 'payment_detail_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_payment_details_by_payment_id(
    international_standing_order_payment_id: str = Path(
        ..., alias='InternationalStandingOrderPaymentId'
    ),
    x_fapi_auth_date: Optional[
        constr(
            pattern=r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        )
    ] = Header(None, alias='x-fapi-auth-date'),
    x_fapi_customer_ip_address: Optional[str] = Header(
        None, alias='x-fapi-customer-ip-address'
    ),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
    authorization: str = Header(..., alias='Authorization'),
    x_customer_user_agent: Optional[str] = Header(None, alias='x-customer-user-agent'),
):
    """
    Get Payment Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
