# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:54:55+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any as Any_aliased
from typing import List, Optional

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel, constr


class ActiveOrHistoricCurrencyCode(RootModel[constr(pattern=r'^[A-Z]{3,3}$')]):
    root: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description='A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".',
    )


class BuildingNumber(RootModel[constr(min_length=1, max_length=16)]):
    root: constr(min_length=1, max_length=16) = Field(
        ...,
        description='Number that identifies the position of a building on a street.',
    )


class CountryCode(RootModel[constr(pattern=r'^[A-Z]{2,2}$')]):
    root: constr(pattern=r'^[A-Z]{2,2}$') = Field(
        ..., description='Nation with its own government.'
    )


class CountrySubDivision(RootModel[constr(min_length=1, max_length=35)]):
    root: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Identifies a subdivision of a country such as state, region, county.',
    )


class Department(RootModel[constr(min_length=1, max_length=70)]):
    root: constr(min_length=1, max_length=70) = Field(
        ...,
        description='Identification of a division of a large organisation or building.',
    )


class File(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class ISODateTime(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class Identification0(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256) = Field(
        ...,
        description='Identification assigned by an institution to identify an account. This identification is known by the account owner.',
    )


class Identification1(RootModel[constr(min_length=1, max_length=35)]):
    root: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique and unambiguous identification of a financial institution or a branch of a financial institution.',
    )


class Links(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    First: Optional[AnyUrl] = None
    Last: Optional[AnyUrl] = None
    Next: Optional[AnyUrl] = None
    Prev: Optional[AnyUrl] = None
    Self: AnyUrl


class Meta(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    FirstAvailableDateTime: Optional[ISODateTime] = None
    LastAvailableDateTime: Optional[ISODateTime] = None
    TotalPages: Optional[int] = None


class Name(RootModel[constr(min_length=1, max_length=140)]):
    root: constr(min_length=1, max_length=140) = Field(
        ...,
        description='Name by which an agent is known and which is usually used to identify that agent.',
    )


class OBActiveCurrencyAndAmountSimpleType(
    RootModel[constr(pattern=r'^\d{1,13}$|^\d{1,13}\.\d{1,5}$')]
):
    root: constr(pattern=r'^\d{1,13}$|^\d{1,13}\.\d{1,5}$') = Field(
        ...,
        description='A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.',
    )


class OBActiveOrHistoricCurrencyAndAmount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Amount: OBActiveCurrencyAndAmountSimpleType
    Currency: ActiveOrHistoricCurrencyCode


class OBAddressTypeCode(Enum):
    Business = 'Business'
    Correspondence = 'Correspondence'
    DeliveryTo = 'DeliveryTo'
    MailTo = 'MailTo'
    POBox = 'POBox'
    Postal = 'Postal'
    Residential = 'Residential'
    Statement = 'Statement'


class OBCashAccountDebtor4(BaseModel):
    Identification: Optional[str] = Field(
        None,
        description='^ Identification assigned by an institution to identify an account. This identification is known by the account owner. | Max256Text',
    )
    Name: Optional[str] = Field(
        None,
        description='^ Name of the account, as assigned by the account servicing institution.  Usage The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.',
    )
    SchemeName: Optional[str] = Field(
        None,
        description='^ Name of the identification scheme, in a coded form as published in an external list. | Namespaced Enumeration OBExternalAccountIdentification4Code',
    )
    SecondaryIdentification: Optional[str] = Field(
        None,
        description='^ This is secondary identification of the account, as assigned by the account servicing institution.  This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination) | Max34Text',
    )


class OBChargeBearerType1Code(Enum):
    BorneByCreditor = 'BorneByCreditor'
    BorneByDebtor = 'BorneByDebtor'
    FollowingServiceLevel = 'FollowingServiceLevel'
    Shared = 'Shared'


class OBError1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ErrorCode: str = Field(
        ..., description='Low level textual error code, e.g., UK.OBIE.Field.Missing'
    )
    Message: constr(min_length=1, max_length=500) = Field(
        ...,
        description="A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'\nOBIE doesn't standardise this field",
    )
    Path: Optional[constr(min_length=1, max_length=500)] = Field(
        None,
        description='Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency',
    )
    Url: Optional[str] = Field(
        None,
        description='URL to help remediate the problem, or provide more information, or to API Reference, or help etc',
    )


class OBErrorResponse1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Code: constr(min_length=1, max_length=40) = Field(
        ..., description='High level textual error code, to help categorize the errors.'
    )
    Errors: List[OBError1] = Field(..., min_length=1)
    Id: Optional[constr(min_length=1, max_length=40)] = Field(
        None,
        description='A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.',
    )
    Message: constr(min_length=1, max_length=500) = Field(
        ...,
        description="Brief Error message, e.g., 'There is something wrong with the request parameters provided'",
    )


class OBExternalAccountIdentification4Code(RootModel[str]):
    root: str = Field(
        ...,
        description='Name of the identification scheme, in a coded form as published in an external list.',
    )


class OBExternalFinancialInstitutionIdentification4Code(RootModel[str]):
    root: str = Field(
        ...,
        description='Name of the identification scheme, in a coded form as published in an external list.',
    )


class OBExternalLocalInstrument1Code(RootModel[str]):
    root: str = Field(
        ...,
        description='User community specific instrument.\nUsage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.',
    )


class OBExternalPaymentChargeType1Code(RootModel[str]):
    root: str = Field(..., description='Charge type, in a coded form.')


class AddressLineItem(RootModel[constr(min_length=1, max_length=70)]):
    root: constr(min_length=1, max_length=70) = Field(
        ...,
        description='Information that locates and identifies a specific address, as defined by postal services, presented in free format text.',
    )


class AddressLineItem1(RootModel[constr(min_length=1, max_length=70)]):
    root: constr(min_length=1, max_length=70) = Field(
        ...,
        description='Information that locates and identifies a specific address, as defined by postal services, that is presented in free format text.',
    )


class PaymentContextCode(Enum):
    BillPayment = 'BillPayment'
    EcommerceGoods = 'EcommerceGoods'
    EcommerceServices = 'EcommerceServices'
    Other = 'Other'
    PartyToParty = 'PartyToParty'


class AppliedAuthenticationApproach(Enum):
    CA = 'CA'
    SCA = 'SCA'


class RequestedSCAExemptionType(Enum):
    BillPayment = 'BillPayment'
    ContactlessTravel = 'ContactlessTravel'
    EcommerceGoods = 'EcommerceGoods'
    EcommerceServices = 'EcommerceServices'
    Kiosk = 'Kiosk'
    Parking = 'Parking'
    PartyToParty = 'PartyToParty'


class OBSCASupportData1(BaseModel):
    AppliedAuthenticationApproach_1: Optional[AppliedAuthenticationApproach] = Field(
        None,
        alias='AppliedAuthenticationApproach',
        description='Specifies a character string with a maximum length of 40 characters.\nUsage: This field indicates whether the PSU was subject to SCA performed by the TPP',
    )
    ReferencePaymentOrderId: Optional[constr(min_length=1, max_length=40)] = Field(
        None,
        description='If the payment is recurring, then this field is populated with the transaction identifier of the previous payment occurrence so that the ASPSP can verify that the PISP, amount and the payee are the same as the previous occurrence. The value here refers to the payment id e.g. DomesticPaymentId  ',
    )
    RequestedSCAExemptionType_1: Optional[RequestedSCAExemptionType] = Field(
        None,
        alias='RequestedSCAExemptionType',
        description='This field allows a PISP to request specific SCA Exemption for a Payment Initiation',
    )


class OBSupplementaryData1(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class InstructedAmount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Amount: OBActiveCurrencyAndAmountSimpleType
    Currency: ActiveOrHistoricCurrencyCode


class RemittanceInformation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Reference: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description="Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.\nUsage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.\nIf the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.\nOB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.",
    )
    Unstructured: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description="Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.",
    )


class AuthorisationType(Enum):
    Any = 'Any'
    Single = 'Single'


class Authorisation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class ReadRefundAccount(Enum):
    No = 'No'
    Yes = 'Yes'


class Authorisation1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class Charge(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Amount: OBActiveOrHistoricCurrencyAndAmount
    ChargeBearer: OBChargeBearerType1Code
    Type: OBExternalPaymentChargeType1Code


class Status(Enum):
    Authorised = 'Authorised'
    AwaitingAuthorisation = 'AwaitingAuthorisation'
    Consumed = 'Consumed'
    Rejected = 'Rejected'


class Status1(Enum):
    Authorised = 'Authorised'
    AwaitingFurtherAuthorisation = 'AwaitingFurtherAuthorisation'
    Rejected = 'Rejected'


class MultiAuthorisation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ExpirationDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    LastUpdateDateTime: Optional[datetime] = Field(
        None,
        description='Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    NumberReceived: Optional[int] = Field(
        None, description='Number of authorisations received.'
    )
    NumberRequired: Optional[int] = Field(
        None,
        description='Number of authorisations required for payment order (total required at the start of the multi authorisation journey).',
    )
    Status: Status1 = Field(
        ..., description='Specifies the status of the authorisation flow in code form.'
    )


class Status2(Enum):
    AcceptedCreditSettlementCompleted = 'AcceptedCreditSettlementCompleted'
    AcceptedSettlementCompleted = 'AcceptedSettlementCompleted'
    AcceptedSettlementInProcess = 'AcceptedSettlementInProcess'
    AcceptedWithoutPosting = 'AcceptedWithoutPosting'
    Pending = 'Pending'
    Rejected = 'Rejected'


class Authorisation2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class Permission(Enum):
    Create = 'Create'


class Authorisation3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class Status3(Enum):
    Authorised = 'Authorised'
    AwaitingAuthorisation = 'AwaitingAuthorisation'
    Consumed = 'Consumed'
    Rejected = 'Rejected'


class Status4(Enum):
    Authorised = 'Authorised'
    AwaitingFurtherAuthorisation = 'AwaitingFurtherAuthorisation'
    Rejected = 'Rejected'


class MultiAuthorisation1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ExpirationDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    LastUpdateDateTime: Optional[datetime] = Field(
        None,
        description='Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    NumberReceived: Optional[int] = Field(
        None, description='Number of authorisations received.'
    )
    NumberRequired: Optional[int] = Field(
        None,
        description='Number of authorisations required for payment order (total required at the start of the multi authorisation journey).',
    )
    Status: Status4 = Field(
        ..., description='Specifies the status of the authorisation flow in code form.'
    )


class Status5(Enum):
    Cancelled = 'Cancelled'
    InitiationCompleted = 'InitiationCompleted'
    InitiationFailed = 'InitiationFailed'
    InitiationPending = 'InitiationPending'


class FinalPaymentAmount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Amount: OBActiveCurrencyAndAmountSimpleType
    Currency: ActiveOrHistoricCurrencyCode


class FirstPaymentAmount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Amount: OBActiveCurrencyAndAmountSimpleType
    Currency: ActiveOrHistoricCurrencyCode


class RecurringPaymentAmount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Amount: OBActiveCurrencyAndAmountSimpleType
    Currency: ActiveOrHistoricCurrencyCode


class Authorisation4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class Authorisation5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class Status6(Enum):
    Authorised = 'Authorised'
    AwaitingAuthorisation = 'AwaitingAuthorisation'
    Consumed = 'Consumed'
    Rejected = 'Rejected'


class Status7(Enum):
    Authorised = 'Authorised'
    AwaitingFurtherAuthorisation = 'AwaitingFurtherAuthorisation'
    Rejected = 'Rejected'


class MultiAuthorisation2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ExpirationDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    LastUpdateDateTime: Optional[datetime] = Field(
        None,
        description='Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    NumberReceived: Optional[int] = Field(
        None, description='Number of authorisations received.'
    )
    NumberRequired: Optional[int] = Field(
        None,
        description='Number of authorisations required for payment order (total required at the start of the multi authorisation journey).',
    )
    Status: Status7 = Field(
        ..., description='Specifies the status of the authorisation flow in code form.'
    )


class Status8(Enum):
    Cancelled = 'Cancelled'
    InitiationCompleted = 'InitiationCompleted'
    InitiationFailed = 'InitiationFailed'
    InitiationPending = 'InitiationPending'


class Authorisation6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class Authorisation7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class Status9(Enum):
    Authorised = 'Authorised'
    AwaitingAuthorisation = 'AwaitingAuthorisation'
    AwaitingUpload = 'AwaitingUpload'
    Consumed = 'Consumed'
    Rejected = 'Rejected'


class Status10(Enum):
    Authorised = 'Authorised'
    AwaitingFurtherAuthorisation = 'AwaitingFurtherAuthorisation'
    Rejected = 'Rejected'


class MultiAuthorisation3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ExpirationDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    LastUpdateDateTime: Optional[datetime] = Field(
        None,
        description='Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    NumberReceived: Optional[int] = Field(
        None, description='Number of authorisations received.'
    )
    NumberRequired: Optional[int] = Field(
        None,
        description='Number of authorisations required for payment order (total required at the start of the multi authorisation journey).',
    )
    Status: Status10 = Field(
        ..., description='Specifies the status of the authorisation flow in code form.'
    )


class Status11(Enum):
    InitiationCompleted = 'InitiationCompleted'
    InitiationFailed = 'InitiationFailed'
    InitiationPending = 'InitiationPending'


class FundsAvailableResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    FundsAvailable: bool = Field(
        ...,
        description='Flag to indicate the availability of funds given the Amount in the consent request.',
    )
    FundsAvailableDateTime: datetime = Field(
        ...,
        description='Date and time at which the funds availability check was generated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class Data16(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    FundsAvailableResult_1: Optional[FundsAvailableResult] = Field(
        None,
        alias='FundsAvailableResult',
        description='Result of a funds availability check.',
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class OBWriteFundsConfirmationResponse1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data16
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')


class RateType(Enum):
    Actual = 'Actual'
    Agreed = 'Agreed'
    Indicative = 'Indicative'


class ExchangeRateInformation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ContractIdentification: Optional[constr(min_length=1, max_length=256)] = Field(
        None,
        description='Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.',
    )
    ExchangeRate: Optional[float] = Field(
        None,
        description='The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.',
    )
    RateType_1: RateType = Field(
        ...,
        alias='RateType',
        description='Specifies the type used to complete the currency exchange.',
    )
    UnitCurrency: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description='Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.',
    )


class InstructionPriority(Enum):
    Normal = 'Normal'
    Urgent = 'Urgent'


class Authorisation8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class ExchangeRateInformation1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ContractIdentification: Optional[constr(min_length=1, max_length=256)] = Field(
        None,
        description='Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.',
    )
    ExchangeRate: Optional[float] = Field(
        None,
        description='The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.',
    )
    RateType_1: RateType = Field(
        ...,
        alias='RateType',
        description='Specifies the type used to complete the currency exchange.',
    )
    UnitCurrency: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description='Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.',
    )


class Authorisation9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class ExchangeRateInformation2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ContractIdentification: Optional[constr(min_length=1, max_length=256)] = Field(
        None,
        description='Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.',
    )
    ExchangeRate: float = Field(
        ...,
        description='The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.',
    )
    ExpirationDateTime: Optional[datetime] = Field(
        None,
        description='Specified date and time the exchange rate agreement will expire.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    RateType_1: RateType = Field(
        ...,
        alias='RateType',
        description='Specifies the type used to complete the currency exchange.',
    )
    UnitCurrency: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description='Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.',
    )


class ExchangeRateInformation3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ContractIdentification: Optional[constr(min_length=1, max_length=256)] = Field(
        None,
        description='Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.',
    )
    ExchangeRate: Optional[float] = Field(
        None,
        description='The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.',
    )
    RateType_1: RateType = Field(
        ...,
        alias='RateType',
        description='Specifies the type used to complete the currency exchange.',
    )
    UnitCurrency: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description='Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.',
    )


class Status12(Enum):
    Authorised = 'Authorised'
    AwaitingAuthorisation = 'AwaitingAuthorisation'
    Consumed = 'Consumed'
    Rejected = 'Rejected'


class ExchangeRateInformation4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ContractIdentification: Optional[constr(min_length=1, max_length=256)] = Field(
        None,
        description='Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.',
    )
    ExchangeRate: float = Field(
        ...,
        description='The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.',
    )
    ExpirationDateTime: Optional[datetime] = Field(
        None,
        description='Specified date and time the exchange rate agreement will expire.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    RateType_1: RateType = Field(
        ...,
        alias='RateType',
        description='Specifies the type used to complete the currency exchange.',
    )
    UnitCurrency: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description='Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.',
    )


class ExchangeRateInformation5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ContractIdentification: Optional[constr(min_length=1, max_length=256)] = Field(
        None,
        description='Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.',
    )
    ExchangeRate: Optional[float] = Field(
        None,
        description='The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.',
    )
    RateType_1: RateType = Field(
        ...,
        alias='RateType',
        description='Specifies the type used to complete the currency exchange.',
    )
    UnitCurrency: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description='Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.',
    )


class Status13(Enum):
    Authorised = 'Authorised'
    AwaitingFurtherAuthorisation = 'AwaitingFurtherAuthorisation'
    Rejected = 'Rejected'


class MultiAuthorisation4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ExpirationDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    LastUpdateDateTime: Optional[datetime] = Field(
        None,
        description='Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    NumberReceived: Optional[int] = Field(
        None, description='Number of authorisations received.'
    )
    NumberRequired: Optional[int] = Field(
        None,
        description='Number of authorisations required for payment order (total required at the start of the multi authorisation journey).',
    )
    Status: Status13 = Field(
        ..., description='Specifies the status of the authorisation flow in code form.'
    )


class Status14(Enum):
    AcceptedCreditSettlementCompleted = 'AcceptedCreditSettlementCompleted'
    AcceptedSettlementCompleted = 'AcceptedSettlementCompleted'
    AcceptedSettlementInProcess = 'AcceptedSettlementInProcess'
    AcceptedWithoutPosting = 'AcceptedWithoutPosting'
    Pending = 'Pending'
    Rejected = 'Rejected'


class ExchangeRateInformation6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ContractIdentification: Optional[constr(min_length=1, max_length=256)] = Field(
        None,
        description='Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.',
    )
    ExchangeRate: Optional[float] = Field(
        None,
        description='The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.',
    )
    RateType_1: RateType = Field(
        ...,
        alias='RateType',
        description='Specifies the type used to complete the currency exchange.',
    )
    UnitCurrency: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description='Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.',
    )


class Authorisation10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class ExchangeRateInformation7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ContractIdentification: Optional[constr(min_length=1, max_length=256)] = Field(
        None,
        description='Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.',
    )
    ExchangeRate: Optional[float] = Field(
        None,
        description='The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.',
    )
    RateType_1: RateType = Field(
        ...,
        alias='RateType',
        description='Specifies the type used to complete the currency exchange.',
    )
    UnitCurrency: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description='Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.',
    )


class Authorisation11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class ExchangeRateInformation8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ContractIdentification: Optional[constr(min_length=1, max_length=256)] = Field(
        None,
        description='Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.',
    )
    ExchangeRate: float = Field(
        ...,
        description='The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.',
    )
    ExpirationDateTime: Optional[datetime] = Field(
        None,
        description='Specified date and time the exchange rate agreement will expire.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    RateType_1: RateType = Field(
        ...,
        alias='RateType',
        description='Specifies the type used to complete the currency exchange.',
    )
    UnitCurrency: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description='Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.',
    )


class ExchangeRateInformation9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ContractIdentification: Optional[constr(min_length=1, max_length=256)] = Field(
        None,
        description='Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.',
    )
    ExchangeRate: Optional[float] = Field(
        None,
        description='The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.',
    )
    RateType_1: RateType = Field(
        ...,
        alias='RateType',
        description='Specifies the type used to complete the currency exchange.',
    )
    UnitCurrency: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description='Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.',
    )


class Status15(Enum):
    Authorised = 'Authorised'
    AwaitingAuthorisation = 'AwaitingAuthorisation'
    Consumed = 'Consumed'
    Rejected = 'Rejected'


class ExchangeRateInformation10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ContractIdentification: Optional[constr(min_length=1, max_length=256)] = Field(
        None,
        description='Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.',
    )
    ExchangeRate: float = Field(
        ...,
        description='The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.',
    )
    ExpirationDateTime: Optional[datetime] = Field(
        None,
        description='Specified date and time the exchange rate agreement will expire.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    RateType_1: RateType = Field(
        ...,
        alias='RateType',
        description='Specifies the type used to complete the currency exchange.',
    )
    UnitCurrency: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description='Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.',
    )


class ExchangeRateInformation11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ContractIdentification: Optional[constr(min_length=1, max_length=256)] = Field(
        None,
        description='Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.',
    )
    ExchangeRate: Optional[float] = Field(
        None,
        description='The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.',
    )
    RateType_1: RateType = Field(
        ...,
        alias='RateType',
        description='Specifies the type used to complete the currency exchange.',
    )
    UnitCurrency: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description='Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.',
    )


class Status16(Enum):
    Authorised = 'Authorised'
    AwaitingFurtherAuthorisation = 'AwaitingFurtherAuthorisation'
    Rejected = 'Rejected'


class MultiAuthorisation5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ExpirationDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    LastUpdateDateTime: Optional[datetime] = Field(
        None,
        description='Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    NumberReceived: Optional[int] = Field(
        None, description='Number of authorisations received.'
    )
    NumberRequired: Optional[int] = Field(
        None,
        description='Number of authorisations required for payment order (total required at the start of the multi authorisation journey).',
    )
    Status: Status16 = Field(
        ..., description='Specifies the status of the authorisation flow in code form.'
    )


class Status17(Enum):
    Cancelled = 'Cancelled'
    InitiationCompleted = 'InitiationCompleted'
    InitiationFailed = 'InitiationFailed'
    InitiationPending = 'InitiationPending'


class Authorisation12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class Authorisation13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AuthorisationType_1: AuthorisationType = Field(
        ...,
        alias='AuthorisationType',
        description='Type of authorisation flow requested.',
    )
    CompletionDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class Status18(Enum):
    Authorised = 'Authorised'
    AwaitingAuthorisation = 'AwaitingAuthorisation'
    Consumed = 'Consumed'
    Rejected = 'Rejected'


class Status19(Enum):
    Authorised = 'Authorised'
    AwaitingFurtherAuthorisation = 'AwaitingFurtherAuthorisation'
    Rejected = 'Rejected'


class MultiAuthorisation6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ExpirationDateTime: Optional[datetime] = Field(
        None,
        description='Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    LastUpdateDateTime: Optional[datetime] = Field(
        None,
        description='Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    NumberReceived: Optional[int] = Field(
        None, description='Number of authorisations received.'
    )
    NumberRequired: Optional[int] = Field(
        None,
        description='Number of authorisations required for payment order (total required at the start of the multi authorisation journey).',
    )
    Status: Status19 = Field(
        ..., description='Specifies the status of the authorisation flow in code form.'
    )


class Status20(Enum):
    Cancelled = 'Cancelled'
    InitiationCompleted = 'InitiationCompleted'
    InitiationFailed = 'InitiationFailed'
    InitiationPending = 'InitiationPending'


class Status21(Enum):
    Accepted = 'Accepted'
    AcceptedCancellationRequest = 'AcceptedCancellationRequest'
    AcceptedCreditSettlementCompleted = 'AcceptedCreditSettlementCompleted'
    AcceptedCustomerProfile = 'AcceptedCustomerProfile'
    AcceptedFundsChecked = 'AcceptedFundsChecked'
    AcceptedSettlementCompleted = 'AcceptedSettlementCompleted'
    AcceptedSettlementInProcess = 'AcceptedSettlementInProcess'
    AcceptedTechnicalValidation = 'AcceptedTechnicalValidation'
    AcceptedWithChange = 'AcceptedWithChange'
    AcceptedWithoutPosting = 'AcceptedWithoutPosting'
    Cancelled = 'Cancelled'
    NoCancellationProcess = 'NoCancellationProcess'
    PartiallyAcceptedCancellationRequest = 'PartiallyAcceptedCancellationRequest'
    PartiallyAcceptedTechnicalCorrect = 'PartiallyAcceptedTechnicalCorrect'
    PaymentCancelled = 'PaymentCancelled'
    Pending = 'Pending'
    PendingCancellationRequest = 'PendingCancellationRequest'
    Received = 'Received'
    Rejected = 'Rejected'
    RejectedCancellationRequest = 'RejectedCancellationRequest'


class StatusReason(Enum):
    Cancelled = 'Cancelled'
    PendingFailingSettlement = 'PendingFailingSettlement'
    PendingSettlement = 'PendingSettlement'
    Proprietary = 'Proprietary'
    ProprietaryRejection = 'ProprietaryRejection'
    Suspended = 'Suspended'
    Unmatched = 'Unmatched'


class StatusDetail(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    Status: constr(min_length=1, max_length=128) = Field(
        ...,
        description='Status of a transfer, as assigned by the transaction administrator.',
    )
    StatusReason_1: Optional[StatusReason] = Field(
        None,
        alias='StatusReason',
        description='Reason Code provided for the status of a transfer.',
    )
    StatusReasonDescription: Optional[constr(min_length=1, max_length=256)] = Field(
        None, description='Reason provided for the status of a transfer.'
    )


class PaymentStatu(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    PaymentTransactionId: constr(min_length=1, max_length=210) = Field(
        ...,
        description='Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.',
    )
    Status: Status21 = Field(
        ...,
        description='Status of a transfe, as assigned by the transaction administrator.',
    )
    StatusDetail_1: Optional[StatusDetail] = Field(
        None,
        alias='StatusDetail',
        description='Payment status details as per underlying Payment Rail.',
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the status was assigned to the transfer.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class Data29(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    PaymentStatus: Optional[List[PaymentStatu]] = None


class OBWritePaymentDetailsResponse1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data29
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')


class PostCode(RootModel[constr(min_length=1, max_length=16)]):
    root: constr(min_length=1, max_length=16) = Field(
        ...,
        description='Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.',
    )


class SecondaryIdentification(RootModel[constr(min_length=1, max_length=34)]):
    root: constr(min_length=1, max_length=34) = Field(
        ...,
        description='This is secondary identification of the account, as assigned by the account servicing institution. \nThis can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).',
    )


class StreetName(RootModel[constr(min_length=1, max_length=70)]):
    root: constr(min_length=1, max_length=70) = Field(
        ..., description='Name of a street or thoroughfare.'
    )


class SubDepartment(RootModel[constr(min_length=1, max_length=70)]):
    root: constr(min_length=1, max_length=70) = Field(
        ...,
        description='Identification of a sub-division of a large organisation or building.',
    )


class TownName(RootModel[constr(min_length=1, max_length=35)]):
    root: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Name of a built-up area, with defined boundaries, and a local government.',
    )


class OBCashAccountCreditor3(BaseModel):
    Identification: constr(max_length=256) = Field(
        ...,
        description='Identification assigned by an institution to identify an account. This identification is known by the account owner.',
    )
    Name: str = Field(
        ...,
        description='Name of the account, as assigned by the account servicing institution.  Usage The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.',
    )
    SchemeName: OBExternalAccountIdentification4Code
    SecondaryIdentification: Optional[constr(max_length=34)] = Field(
        None,
        description='Secondary identification of the account, as assigned by the account servicing institution. This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).',
    )


class OBPostalAddress6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AddressLine: Optional[List[AddressLineItem]] = Field(
        None, max_length=7, min_length=0
    )
    AddressType: Optional[OBAddressTypeCode] = None
    BuildingNumber_1: Optional[BuildingNumber] = Field(None, alias='BuildingNumber')
    Country: Optional[CountryCode] = None
    CountrySubDivision_1: Optional[CountrySubDivision] = Field(
        None, alias='CountrySubDivision'
    )
    Department_1: Optional[Department] = Field(None, alias='Department')
    PostCode_1: Optional[PostCode] = Field(None, alias='PostCode')
    StreetName_1: Optional[StreetName] = Field(None, alias='StreetName')
    SubDepartment_1: Optional[SubDepartment] = Field(None, alias='SubDepartment')
    TownName_1: Optional[TownName] = Field(None, alias='TownName')


class DeliveryAddress(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    AddressLine: Optional[List[AddressLineItem1]] = Field(
        None, max_length=2, min_length=0
    )
    BuildingNumber_1: Optional[BuildingNumber] = Field(None, alias='BuildingNumber')
    Country: constr(pattern=r'^[A-Z]{2,2}$') = Field(
        ...,
        description='Nation with its own government, occupying a particular territory.',
    )
    CountrySubDivision_1: Optional[CountrySubDivision] = Field(
        None, alias='CountrySubDivision'
    )
    PostCode_1: Optional[PostCode] = Field(None, alias='PostCode')
    StreetName_1: Optional[StreetName] = Field(None, alias='StreetName')
    TownName_1: TownName = Field(..., alias='TownName')


class OBRisk1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    DeliveryAddress_1: Optional[DeliveryAddress] = Field(
        None,
        alias='DeliveryAddress',
        description='Information that locates and identifies a specific address, as defined by postal services or in free format text.',
    )
    MerchantCategoryCode: Optional[constr(min_length=3, max_length=4)] = Field(
        None,
        description='Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.',
    )
    MerchantCustomerIdentification: Optional[constr(min_length=1, max_length=70)] = (
        Field(
            None,
            description='The unique customer identifier of the PSU with the merchant.',
        )
    )
    PaymentContextCode_1: Optional[PaymentContextCode] = Field(
        None, alias='PaymentContextCode', description='Specifies the payment context'
    )


class CreditorAccount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Identification: Identification0
    Name: constr(min_length=1, max_length=350) = Field(
        ...,
        description='The account name is the name or names of the account owner(s) represented at an account level.\nNote, the account name is not the product name or the nickname of the account.\nOB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.',
    )
    SchemeName: OBExternalAccountIdentification4Code
    SecondaryIdentification_1: Optional[SecondaryIdentification] = Field(
        None, alias='SecondaryIdentification'
    )


class DebtorAccount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Identification: Identification0
    Name: Optional[constr(min_length=1, max_length=350)] = Field(
        None,
        description="The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.\nNote, the account name is not the product name or the nickname of the account.",
    )
    SchemeName: OBExternalAccountIdentification4Code
    SecondaryIdentification_1: Optional[SecondaryIdentification] = Field(
        None, alias='SecondaryIdentification'
    )


class Initiation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorPostalAddress: Optional[OBPostalAddress6] = None
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    EndToEndIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    Initiation_1: Initiation = Field(
        ...,
        alias='Initiation',
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.',
    )


class OBWriteDomestic2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data_1: Data = Field(..., alias='Data')
    Risk: OBRisk1


class Initiation1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorPostalAddress: Optional[OBPostalAddress6] = None
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    EndToEndIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation_1: Optional[Authorisation] = Field(
        None,
        alias='Authorisation',
        description='The authorisation type request from the TPP.',
    )
    Initiation: Initiation1 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.',
    )
    ReadRefundAccount_1: Optional[ReadRefundAccount] = Field(
        None,
        alias='ReadRefundAccount',
        description='Specifies to share the refund account details with PISP',
    )
    SCASupportData: Optional[OBSCASupportData1] = None


class OBWriteDomesticConsent4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data1
    Risk: OBRisk1


class Initiation2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorPostalAddress: Optional[OBPostalAddress6] = None
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    EndToEndIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation: Optional[Authorisation1] = Field(
        None, description='The authorisation type request from the TPP.'
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    CutOffDateTime: Optional[datetime] = Field(
        None,
        description='Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    ExpectedExecutionDateTime: Optional[datetime] = Field(
        None,
        description='Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    ExpectedSettlementDateTime: Optional[datetime] = Field(
        None,
        description='Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Initiation: Initiation2 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.',
    )
    ReadRefundAccount_1: Optional[ReadRefundAccount] = Field(
        None,
        alias='ReadRefundAccount',
        description='Specifies to share the refund account details with PISP',
    )
    SCASupportData: Optional[OBSCASupportData1] = None
    Status_1: Status = Field(
        ...,
        alias='Status',
        description='Specifies the status of consent resource in code form.',
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteDomesticConsentResponse5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data2
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')
    Risk: OBRisk1


class Initiation3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorPostalAddress: Optional[OBPostalAddress6] = None
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    EndToEndIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Account(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Identification: Identification0
    Name: constr(min_length=1, max_length=350) = Field(
        ...,
        description='Name of the account, as assigned by the account servicing institution.\nUsage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.\nOB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.',
    )
    SchemeName: OBExternalAccountIdentification4Code
    SecondaryIdentification_1: Optional[SecondaryIdentification] = Field(
        None, alias='SecondaryIdentification'
    )


class Refund(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Account_1: Account = Field(
        ..., alias='Account', description='Provides the details to identify an account.'
    )


class Data3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    DomesticPaymentId: constr(min_length=1, max_length=40) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the domestic payment resource.',
    )
    ExpectedExecutionDateTime: Optional[datetime] = Field(
        None,
        description='Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    ExpectedSettlementDateTime: Optional[datetime] = Field(
        None,
        description='Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Initiation: Initiation3 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.',
    )
    MultiAuthorisation_1: Optional[MultiAuthorisation] = Field(
        None,
        alias='MultiAuthorisation',
        description='The multiple authorisation flow response from the ASPSP.',
    )
    Refund_1: Optional[Refund] = Field(
        None,
        alias='Refund',
        description='Unambiguous identification of the refund account to which a refund will be made as a result of the transaction.',
    )
    Status: Status2 = Field(
        ..., description='Specifies the status of the payment information group.'
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteDomesticResponse5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data3
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')


class Initiation4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorPostalAddress: Optional[OBPostalAddress6] = None
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    EndToEndIdentification: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    RequestedExecutionDateTime: datetime = Field(
        ...,
        description="Date at which the initiating party requests the clearing agent to process the payment. \nUsage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    Initiation: Initiation4 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.',
    )


class OBWriteDomesticScheduled2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data4
    Risk: OBRisk1


class Initiation5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorPostalAddress: Optional[OBPostalAddress6] = None
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    EndToEndIdentification: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    RequestedExecutionDateTime: datetime = Field(
        ...,
        description="Date at which the initiating party requests the clearing agent to process the payment. \nUsage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation: Optional[Authorisation2] = Field(
        None, description='The authorisation type request from the TPP.'
    )
    Initiation: Initiation5 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.',
    )
    Permission_1: Permission = Field(
        ...,
        alias='Permission',
        description='Specifies the Open Banking service request types.',
    )
    ReadRefundAccount_1: Optional[ReadRefundAccount] = Field(
        None,
        alias='ReadRefundAccount',
        description='Specifies to share the refund account details with PISP',
    )
    SCASupportData: Optional[OBSCASupportData1] = None


class OBWriteDomesticScheduledConsent4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data5
    Risk: OBRisk1


class Initiation6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorPostalAddress: Optional[OBPostalAddress6] = None
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    EndToEndIdentification: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    RequestedExecutionDateTime: datetime = Field(
        ...,
        description="Date at which the initiating party requests the clearing agent to process the payment. \nUsage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation: Optional[Authorisation3] = Field(
        None, description='The authorisation type request from the TPP.'
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    CutOffDateTime: Optional[datetime] = Field(
        None,
        description='Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    ExpectedExecutionDateTime: Optional[datetime] = Field(
        None,
        description='Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    ExpectedSettlementDateTime: Optional[datetime] = Field(
        None,
        description='Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Initiation: Initiation6 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.',
    )
    Permission_1: Permission = Field(
        ...,
        alias='Permission',
        description='Specifies the Open Banking service request types.',
    )
    ReadRefundAccount_1: Optional[ReadRefundAccount] = Field(
        None,
        alias='ReadRefundAccount',
        description='Specifies to share the refund account details with PISP',
    )
    SCASupportData: Optional[OBSCASupportData1] = None
    Status: Status3 = Field(
        ..., description='Specifies the status of consent resource in code form.'
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the consent resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteDomesticScheduledConsentResponse5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data6
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')
    Risk: OBRisk1


class Initiation7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorPostalAddress: Optional[OBPostalAddress6] = None
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    EndToEndIdentification: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    RequestedExecutionDateTime: datetime = Field(
        ...,
        description="Date at which the initiating party requests the clearing agent to process the payment. \nUsage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Refund1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Account_1: Account = Field(
        ..., alias='Account', description='Provides the details to identify an account.'
    )


class Data7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    DomesticScheduledPaymentId: constr(min_length=1, max_length=40) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the domestic schedule payment resource.',
    )
    ExpectedExecutionDateTime: Optional[datetime] = Field(
        None,
        description='Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    ExpectedSettlementDateTime: Optional[datetime] = Field(
        None,
        description='Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Initiation: Initiation7 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.',
    )
    MultiAuthorisation: Optional[MultiAuthorisation1] = Field(
        None, description='The multiple authorisation flow response from the ASPSP.'
    )
    Refund: Optional[Refund1] = Field(
        None,
        description='Unambiguous identification of the refund account to which a refund will be made as a result of the transaction.',
    )
    Status: Status5 = Field(
        ..., description='Specifies the status of the payment order resource.'
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteDomesticScheduledResponse5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data7
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')


class Initiation8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Identification assigned by an institution to identify an account. This identification is known by the account owner.',
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Provides the details to identify the debtor account.',
    )
    FinalPaymentAmount_1: Optional[FinalPaymentAmount] = Field(
        None,
        alias='FinalPaymentAmount',
        description='The amount of the final Standing Order',
    )
    FinalPaymentDateTime: Optional[datetime] = Field(
        None,
        description='The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    FirstPaymentAmount_1: FirstPaymentAmount = Field(
        ...,
        alias='FirstPaymentAmount',
        description='The amount of the first Standing Order',
    )
    FirstPaymentDateTime: datetime = Field(
        ...,
        description='The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Frequency: constr(
        pattern=r'^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$'
    ) = Field(
        ...,
        description='Individual Definitions:\nEvryDay - Every day\nEvryWorkgDay - Every working day\nIntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)\nWkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)\nIntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)\nQtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). \nENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. \nSCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.\nRECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. \nIndividual Patterns:\nEvryDay (ScheduleCode)\nEvryWorkgDay (ScheduleCode)\nIntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)\nWkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)\nIntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)\nQtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay\nThe regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:\nEvryDay\nEvryWorkgDay\nIntrvlWkDay:0[1-9]:0[1-7]\nWkInMnthDay:0[1-5]:0[1-7]\nIntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])\nQtrDay:(ENGLISH|SCOTTISH|RECEIVED)\nFull Regular Expression:\n^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$',
    )
    NumberOfPayments: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.',
    )
    RecurringPaymentAmount_1: Optional[RecurringPaymentAmount] = Field(
        None,
        alias='RecurringPaymentAmount',
        description='The amount of the recurring Standing Order',
    )
    RecurringPaymentDateTime: Optional[datetime] = Field(
        None,
        description='The date on which the first recurring payment for a Standing Order schedule will be made. \nUsage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Reference: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description="Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.\nUsage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.\nIf the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    Initiation: Initiation8 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.',
    )


class OBWriteDomesticStandingOrder3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data8
    Risk: OBRisk1


class Initiation9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Identification assigned by an institution to identify an account. This identification is known by the account owner.',
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Provides the details to identify the debtor account.',
    )
    FinalPaymentAmount_1: Optional[FinalPaymentAmount] = Field(
        None,
        alias='FinalPaymentAmount',
        description='The amount of the final Standing Order',
    )
    FinalPaymentDateTime: Optional[datetime] = Field(
        None,
        description='The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    FirstPaymentAmount_1: FirstPaymentAmount = Field(
        ...,
        alias='FirstPaymentAmount',
        description='The amount of the first Standing Order',
    )
    FirstPaymentDateTime: datetime = Field(
        ...,
        description='The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Frequency: constr(
        pattern=r'^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$'
    ) = Field(
        ...,
        description='Individual Definitions:\nEvryDay - Every day\nEvryWorkgDay - Every working day\nIntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)\nWkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)\nIntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)\nQtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). \nENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. \nSCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.\nRECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. \nIndividual Patterns:\nEvryDay (ScheduleCode)\nEvryWorkgDay (ScheduleCode)\nIntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)\nWkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)\nIntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)\nQtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay\nThe regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:\nEvryDay\nEvryWorkgDay\nIntrvlWkDay:0[1-9]:0[1-7]\nWkInMnthDay:0[1-5]:0[1-7]\nIntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])\nQtrDay:(ENGLISH|SCOTTISH|RECEIVED)\nFull Regular Expression:\n^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$',
    )
    NumberOfPayments: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.',
    )
    RecurringPaymentAmount_1: Optional[RecurringPaymentAmount] = Field(
        None,
        alias='RecurringPaymentAmount',
        description='The amount of the recurring Standing Order',
    )
    RecurringPaymentDateTime: Optional[datetime] = Field(
        None,
        description='The date on which the first recurring payment for a Standing Order schedule will be made. \nUsage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Reference: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description="Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.\nUsage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.\nIf the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation: Optional[Authorisation4] = Field(
        None, description='The authorisation type request from the TPP.'
    )
    Initiation: Initiation9 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.',
    )
    Permission_1: Permission = Field(
        ...,
        alias='Permission',
        description='Specifies the Open Banking service request types.',
    )
    ReadRefundAccount_1: Optional[ReadRefundAccount] = Field(
        None,
        alias='ReadRefundAccount',
        description='Specifies to share the refund account details with PISP',
    )
    SCASupportData: Optional[OBSCASupportData1] = None


class OBWriteDomesticStandingOrderConsent5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data9
    Risk: OBRisk1


class Initiation10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Identification assigned by an institution to identify an account. This identification is known by the account owner.',
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    FinalPaymentAmount_1: Optional[FinalPaymentAmount] = Field(
        None,
        alias='FinalPaymentAmount',
        description='The amount of the final Standing Order',
    )
    FinalPaymentDateTime: Optional[datetime] = Field(
        None,
        description='The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    FirstPaymentAmount_1: FirstPaymentAmount = Field(
        ...,
        alias='FirstPaymentAmount',
        description='The amount of the first Standing Order',
    )
    FirstPaymentDateTime: datetime = Field(
        ...,
        description='The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Frequency: constr(
        pattern=r'^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$'
    ) = Field(
        ...,
        description='Individual Definitions:\nEvryDay - Every day\nEvryWorkgDay - Every working day\nIntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)\nWkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)\nIntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)\nQtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). \nENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. \nSCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.\nRECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. \nIndividual Patterns:\nEvryDay (ScheduleCode)\nEvryWorkgDay (ScheduleCode)\nIntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)\nWkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)\nIntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)\nQtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay\nThe regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:\nEvryDay\nEvryWorkgDay\nIntrvlWkDay:0[1-9]:0[1-7]\nWkInMnthDay:0[1-5]:0[1-7]\nIntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])\nQtrDay:(ENGLISH|SCOTTISH|RECEIVED)\nFull Regular Expression:\n^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$',
    )
    NumberOfPayments: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.',
    )
    RecurringPaymentAmount_1: Optional[RecurringPaymentAmount] = Field(
        None,
        alias='RecurringPaymentAmount',
        description='The amount of the recurring Standing Order',
    )
    RecurringPaymentDateTime: Optional[datetime] = Field(
        None,
        description='The date on which the first recurring payment for a Standing Order schedule will be made. \nUsage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Reference: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description="Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.\nUsage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.\nIf the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation: Optional[Authorisation5] = Field(
        None, description='The authorisation type request from the TPP.'
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    CutOffDateTime: Optional[datetime] = Field(
        None,
        description='Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    Initiation: Initiation10 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.',
    )
    Permission_1: Permission = Field(
        ...,
        alias='Permission',
        description='Specifies the Open Banking service request types.',
    )
    ReadRefundAccount_1: Optional[ReadRefundAccount] = Field(
        None,
        alias='ReadRefundAccount',
        description='Specifies to share the refund account details with PISP',
    )
    SCASupportData: Optional[OBSCASupportData1] = None
    Status: Status6 = Field(
        ..., description='Specifies the status of consent resource in code form.'
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteDomesticStandingOrderConsentResponse6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data10
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')
    Risk: OBRisk1


class Initiation11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Identification assigned by an institution to identify an account. This identification is known by the account owner.',
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    FinalPaymentAmount_1: Optional[FinalPaymentAmount] = Field(
        None,
        alias='FinalPaymentAmount',
        description='The amount of the final Standing Order',
    )
    FinalPaymentDateTime: Optional[datetime] = Field(
        None,
        description='The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    FirstPaymentAmount_1: FirstPaymentAmount = Field(
        ...,
        alias='FirstPaymentAmount',
        description='The amount of the first Standing Order',
    )
    FirstPaymentDateTime: datetime = Field(
        ...,
        description='The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Frequency: constr(
        pattern=r'^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$'
    ) = Field(
        ...,
        description='Individual Definitions:\nEvryDay - Every day\nEvryWorkgDay - Every working day\nIntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)\nWkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)\nIntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)\nQtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). \nENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. \nSCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.\nRECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. \nIndividual Patterns:\nEvryDay (ScheduleCode)\nEvryWorkgDay (ScheduleCode)\nIntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)\nWkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)\nIntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)\nQtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay\nThe regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:\nEvryDay\nEvryWorkgDay\nIntrvlWkDay:0[1-9]:0[1-7]\nWkInMnthDay:0[1-5]:0[1-7]\nIntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])\nQtrDay:(ENGLISH|SCOTTISH|RECEIVED)\nFull Regular Expression:\n^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$',
    )
    NumberOfPayments: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.',
    )
    RecurringPaymentAmount_1: Optional[RecurringPaymentAmount] = Field(
        None,
        alias='RecurringPaymentAmount',
        description='The amount of the recurring Standing Order',
    )
    RecurringPaymentDateTime: Optional[datetime] = Field(
        None,
        description='The date on which the first recurring payment for a Standing Order schedule will be made. \nUsage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Reference: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description="Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.\nUsage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.\nIf the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Refund2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Account_1: Account = Field(
        ..., alias='Account', description='Provides the details to identify an account.'
    )


class Data11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    DomesticStandingOrderId: constr(min_length=1, max_length=40) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the domestic standing order resource.',
    )
    Initiation: Initiation11 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.',
    )
    MultiAuthorisation: Optional[MultiAuthorisation2] = Field(
        None, description='The multiple authorisation flow response from the ASPSP.'
    )
    Refund: Optional[Refund2] = Field(
        None,
        description='Unambiguous identification of the refund account to which a refund will be made as a result of the transaction.',
    )
    Status: Status8 = Field(
        ..., description='Specifies the status of the payment order resource.'
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteDomesticStandingOrderResponse6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data11
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')


class Initiation12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ControlSum: Optional[float] = Field(
        None,
        description='Total of all individual amounts included in the group, irrespective of currencies.',
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    FileHash: constr(min_length=1, max_length=44) = Field(
        ...,
        description='A base64 encoding of a SHA256 hash of the file to be uploaded.',
    )
    FileReference: Optional[constr(min_length=1, max_length=40)] = Field(
        None, description='Reference for the file.'
    )
    FileType: str = Field(..., description='Specifies the payment file type.')
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    NumberOfTransactions: Optional[constr(pattern=r'[0-9]{1,15}')] = Field(
        None,
        description='Number of individual transactions contained in the payment information group.',
    )
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    RequestedExecutionDateTime: Optional[datetime] = Field(
        None,
        description="Date at which the initiating party requests the clearing agent to process the payment. \nUsage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    Initiation: Initiation12 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.',
    )


class OBWriteFile2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data12


class Initiation13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ControlSum: Optional[float] = Field(
        None,
        description='Total of all individual amounts included in the group, irrespective of currencies.',
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    FileHash: constr(min_length=1, max_length=44) = Field(
        ...,
        description='A base64 encoding of a SHA256 hash of the file to be uploaded.',
    )
    FileReference: Optional[constr(min_length=1, max_length=40)] = Field(
        None, description='Reference for the file.'
    )
    FileType: str = Field(..., description='Specifies the payment file type.')
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    NumberOfTransactions: Optional[constr(pattern=r'[0-9]{1,15}')] = Field(
        None,
        description='Number of individual transactions contained in the payment information group.',
    )
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    RequestedExecutionDateTime: Optional[datetime] = Field(
        None,
        description="Date at which the initiating party requests the clearing agent to process the payment. \nUsage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation: Optional[Authorisation6] = Field(
        None, description='The authorisation type request from the TPP.'
    )
    Initiation: Initiation13 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.',
    )
    SCASupportData: Optional[OBSCASupportData1] = None


class OBWriteFileConsent3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data13


class Initiation14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ControlSum: Optional[float] = Field(
        None,
        description='Total of all individual amounts included in the group, irrespective of currencies.',
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    FileHash: constr(min_length=1, max_length=44) = Field(
        ...,
        description='A base64 encoding of a SHA256 hash of the file to be uploaded.',
    )
    FileReference: Optional[constr(min_length=1, max_length=40)] = Field(
        None, description='Reference for the file.'
    )
    FileType: str = Field(..., description='Specifies the payment file type.')
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    NumberOfTransactions: Optional[constr(pattern=r'[0-9]{1,15}')] = Field(
        None,
        description='Number of individual transactions contained in the payment information group.',
    )
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    RequestedExecutionDateTime: Optional[datetime] = Field(
        None,
        description="Date at which the initiating party requests the clearing agent to process the payment. \nUsage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation: Optional[Authorisation7] = Field(
        None, description='The authorisation type request from the TPP.'
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    CutOffDateTime: Optional[datetime] = Field(
        None,
        description='Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    Initiation: Initiation14 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.',
    )
    SCASupportData: Optional[OBSCASupportData1] = None
    Status: Status9 = Field(
        ..., description='Specifies the status of consent resource in code form.'
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the consent resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteFileConsentResponse4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data14
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')


class Initiation15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ControlSum: Optional[float] = Field(
        None,
        description='Total of all individual amounts included in the group, irrespective of currencies.',
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    FileHash: constr(min_length=1, max_length=44) = Field(
        ...,
        description='A base64 encoding of a SHA256 hash of the file to be uploaded.',
    )
    FileReference: Optional[constr(min_length=1, max_length=40)] = Field(
        None, description='Reference for the file.'
    )
    FileType: str = Field(..., description='Specifies the payment file type.')
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    NumberOfTransactions: Optional[constr(pattern=r'[0-9]{1,15}')] = Field(
        None,
        description='Number of individual transactions contained in the payment information group.',
    )
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    RequestedExecutionDateTime: Optional[datetime] = Field(
        None,
        description="Date at which the initiating party requests the clearing agent to process the payment. \nUsage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    FilePaymentId: constr(min_length=1, max_length=40) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the file payment resource.',
    )
    Initiation: Initiation15 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.',
    )
    MultiAuthorisation: Optional[MultiAuthorisation3] = Field(
        None, description='The multiple authorisation flow response from the ASPSP.'
    )
    Status: Status11 = Field(
        ..., description='Specifies the status of the payment order resource.'
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteFileResponse3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data15
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')


class Creditor(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Name: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Name by which a party is known and which is usually used to identify that party.',
    )
    PostalAddress: Optional[OBPostalAddress6] = None


class CreditorAgent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Identification: Optional[Identification1] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    PostalAddress: Optional[OBPostalAddress6] = None
    SchemeName: Optional[OBExternalFinancialInstitutionIdentification4Code] = None


class Initiation16(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ChargeBearer: Optional[OBChargeBearerType1Code] = None
    Creditor_1: Optional[Creditor] = Field(
        None, alias='Creditor', description='Party to which an amount of money is due.'
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorAgent_1: Optional[CreditorAgent] = Field(
        None,
        alias='CreditorAgent',
        description='Financial institution servicing an account for the creditor.',
    )
    CurrencyOfTransfer: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.",
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    DestinationCountryCode: Optional[constr(pattern=r'[A-Z]{2,2}')] = Field(
        None,
        description='Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).',
    )
    EndToEndIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    ExchangeRateInformation_1: Optional[ExchangeRateInformation] = Field(
        None,
        alias='ExchangeRateInformation',
        description='Provides details on the currency exchange rate and contract.',
    )
    ExtendedPurpose: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    InstructionPriority_1: Optional[InstructionPriority] = Field(
        None,
        alias='InstructionPriority',
        description='Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    Purpose: Optional[constr(min_length=1, max_length=4)] = Field(
        None,
        description='Specifies the external purpose code in the format of character string with a maximum length of 4 characters.\nThe list of valid codes is an external code list published separately.\nExternal code sets can be downloaded from www.iso20022.org.',
    )
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data17(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    Initiation: Initiation16 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single international payment.',
    )


class OBWriteInternational3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data17
    Risk: OBRisk1


class Initiation17(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ChargeBearer: Optional[OBChargeBearerType1Code] = None
    Creditor_1: Optional[Creditor] = Field(
        None, alias='Creditor', description='Party to which an amount of money is due.'
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorAgent_1: Optional[CreditorAgent] = Field(
        None,
        alias='CreditorAgent',
        description='Financial institution servicing an account for the creditor.',
    )
    CurrencyOfTransfer: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.",
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    DestinationCountryCode: Optional[constr(pattern=r'[A-Z]{2,2}')] = Field(
        None,
        description='Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).',
    )
    EndToEndIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    ExchangeRateInformation: Optional[ExchangeRateInformation1] = Field(
        None, description='Provides details on the currency exchange rate and contract.'
    )
    ExtendedPurpose: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    InstructionPriority_1: Optional[InstructionPriority] = Field(
        None,
        alias='InstructionPriority',
        description='Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    Purpose: Optional[constr(min_length=1, max_length=4)] = Field(
        None,
        description='Specifies the external purpose code in the format of character string with a maximum length of 4 characters.\nThe list of valid codes is an external code list published separately.\nExternal code sets can be downloaded from www.iso20022.org.',
    )
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data18(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation: Optional[Authorisation8] = Field(
        None, description='The authorisation type request from the TPP.'
    )
    Initiation: Initiation17 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single international payment.',
    )
    ReadRefundAccount_1: Optional[ReadRefundAccount] = Field(
        None,
        alias='ReadRefundAccount',
        description='Specifies to share the refund account details with PISP',
    )
    SCASupportData: Optional[OBSCASupportData1] = None


class OBWriteInternationalConsent5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data18
    Risk: OBRisk1


class Initiation18(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ChargeBearer: Optional[OBChargeBearerType1Code] = None
    Creditor_1: Optional[Creditor] = Field(
        None, alias='Creditor', description='Party to which an amount of money is due.'
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorAgent_1: Optional[CreditorAgent] = Field(
        None,
        alias='CreditorAgent',
        description='Financial institution servicing an account for the creditor.',
    )
    CurrencyOfTransfer: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.",
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    DestinationCountryCode: Optional[constr(pattern=r'[A-Z]{2,2}')] = Field(
        None,
        description='Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).',
    )
    EndToEndIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    ExchangeRateInformation: Optional[ExchangeRateInformation3] = Field(
        None, description='Provides details on the currency exchange rate and contract.'
    )
    ExtendedPurpose: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    InstructionPriority_1: Optional[InstructionPriority] = Field(
        None,
        alias='InstructionPriority',
        description='Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    Purpose: Optional[constr(min_length=1, max_length=4)] = Field(
        None,
        description='Specifies the external purpose code in the format of character string with a maximum length of 4 characters.\nThe list of valid codes is an external code list published separately.\nExternal code sets can be downloaded from www.iso20022.org.',
    )
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data19(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation: Optional[Authorisation9] = Field(
        None, description='The authorisation type request from the TPP.'
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    CutOffDateTime: Optional[datetime] = Field(
        None,
        description='Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    ExchangeRateInformation: Optional[ExchangeRateInformation2] = Field(
        None,
        description='Further detailed information on the exchange rate that has been used in the payment transaction.',
    )
    ExpectedExecutionDateTime: Optional[datetime] = Field(
        None,
        description='Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    ExpectedSettlementDateTime: Optional[datetime] = Field(
        None,
        description='Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Initiation: Initiation18 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single international payment.',
    )
    ReadRefundAccount_1: Optional[ReadRefundAccount] = Field(
        None,
        alias='ReadRefundAccount',
        description='Specifies to share the refund account details with PISP',
    )
    SCASupportData: Optional[OBSCASupportData1] = None
    Status: Status12 = Field(
        ..., description='Specifies the status of consent resource in code form.'
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteInternationalConsentResponse6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data19
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')
    Risk: OBRisk1


class Initiation19(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ChargeBearer: Optional[OBChargeBearerType1Code] = None
    Creditor_1: Optional[Creditor] = Field(
        None, alias='Creditor', description='Party to which an amount of money is due.'
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorAgent_1: Optional[CreditorAgent] = Field(
        None,
        alias='CreditorAgent',
        description='Financial institution servicing an account for the creditor.',
    )
    CurrencyOfTransfer: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.",
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    DestinationCountryCode: Optional[constr(pattern=r'[A-Z]{2,2}')] = Field(
        None,
        description='Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).',
    )
    EndToEndIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    ExchangeRateInformation: Optional[ExchangeRateInformation5] = Field(
        None, description='Provides details on the currency exchange rate and contract.'
    )
    ExtendedPurpose: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    InstructionPriority_1: Optional[InstructionPriority] = Field(
        None,
        alias='InstructionPriority',
        description='Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    Purpose: Optional[constr(min_length=1, max_length=4)] = Field(
        None,
        description='Specifies the external purpose code in the format of character string with a maximum length of 4 characters.\nThe list of valid codes is an external code list published separately.\nExternal code sets can be downloaded from www.iso20022.org.',
    )
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Agent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Identification: Optional[Identification1] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    PostalAddress: Optional[OBPostalAddress6] = None
    SchemeName: Optional[OBExternalFinancialInstitutionIdentification4Code] = None


class Refund3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Account_1: Account = Field(
        ..., alias='Account', description='Provides the details to identify an account.'
    )
    Agent_1: Optional[Agent] = Field(
        None,
        alias='Agent',
        description='Set of elements used to uniquely and unambiguously identify a financial institution or a branch of a financial institution.',
    )
    Creditor_1: Optional[Creditor] = Field(
        None,
        alias='Creditor',
        description='Set of elements used to identify a person or an organisation.',
    )


class Data20(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    ExchangeRateInformation: Optional[ExchangeRateInformation4] = Field(
        None,
        description='Further detailed information on the exchange rate that has been used in the payment transaction.',
    )
    ExpectedExecutionDateTime: Optional[datetime] = Field(
        None,
        description='Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    ExpectedSettlementDateTime: Optional[datetime] = Field(
        None,
        description='Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Initiation: Initiation19 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single international payment.',
    )
    InternationalPaymentId: constr(min_length=1, max_length=40) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the international payment resource.',
    )
    MultiAuthorisation: Optional[MultiAuthorisation4] = Field(
        None, description='The multiple authorisation flow response from the ASPSP.'
    )
    Refund: Optional[Refund3] = None
    Status: Status14 = Field(
        ..., description='Specifies the status of the payment information group.'
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteInternationalResponse5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data20
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')


class Initiation20(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ChargeBearer: Optional[OBChargeBearerType1Code] = None
    Creditor_1: Optional[Creditor] = Field(
        None, alias='Creditor', description='Party to which an amount of money is due.'
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorAgent_1: Optional[CreditorAgent] = Field(
        None,
        alias='CreditorAgent',
        description='Financial institution servicing an account for the creditor.',
    )
    CurrencyOfTransfer: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.",
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    DestinationCountryCode: Optional[constr(pattern=r'[A-Z]{2,2}')] = Field(
        None,
        description='Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).',
    )
    EndToEndIdentification: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    ExchangeRateInformation: Optional[ExchangeRateInformation6] = Field(
        None, description='Provides details on the currency exchange rate and contract.'
    )
    ExtendedPurpose: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    InstructionPriority_1: Optional[InstructionPriority] = Field(
        None,
        alias='InstructionPriority',
        description='Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    Purpose: Optional[constr(min_length=1, max_length=4)] = Field(
        None,
        description='Specifies the external purpose code in the format of character string with a maximum length of 4 characters.\nThe list of valid codes is an external code list published separately.\nExternal code sets can be downloaded from www.iso20022.org.',
    )
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    RequestedExecutionDateTime: datetime = Field(
        ...,
        description="Date at which the initiating party requests the clearing agent to process the payment. \nUsage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    Initiation: Initiation20 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.',
    )


class OBWriteInternationalScheduled3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data21
    Risk: OBRisk1


class Initiation21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ChargeBearer: Optional[OBChargeBearerType1Code] = None
    Creditor_1: Optional[Creditor] = Field(
        None, alias='Creditor', description='Party to which an amount of money is due.'
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorAgent_1: Optional[CreditorAgent] = Field(
        None,
        alias='CreditorAgent',
        description='Financial institution servicing an account for the creditor.',
    )
    CurrencyOfTransfer: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.",
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    DestinationCountryCode: Optional[constr(pattern=r'[A-Z]{2,2}')] = Field(
        None,
        description='Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).',
    )
    EndToEndIdentification: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    ExchangeRateInformation: Optional[ExchangeRateInformation7] = Field(
        None, description='Provides details on the currency exchange rate and contract.'
    )
    ExtendedPurpose: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    InstructionPriority_1: Optional[InstructionPriority] = Field(
        None,
        alias='InstructionPriority',
        description='Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    Purpose: Optional[constr(min_length=1, max_length=4)] = Field(
        None,
        description='Specifies the external purpose code in the format of character string with a maximum length of 4 characters.\nThe list of valid codes is an external code list published separately.\nExternal code sets can be downloaded from www.iso20022.org.',
    )
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    RequestedExecutionDateTime: datetime = Field(
        ...,
        description="Date at which the initiating party requests the clearing agent to process the payment. \nUsage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation: Optional[Authorisation10] = Field(
        None, description='The authorisation type request from the TPP.'
    )
    Initiation: Initiation21 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.',
    )
    Permission_1: Permission = Field(
        ...,
        alias='Permission',
        description='Specifies the Open Banking service request types.',
    )
    ReadRefundAccount_1: Optional[ReadRefundAccount] = Field(
        None,
        alias='ReadRefundAccount',
        description='Specifies to share the refund account details with PISP',
    )
    SCASupportData: Optional[OBSCASupportData1] = None


class OBWriteInternationalScheduledConsent5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data22
    Risk: OBRisk1


class Creditor7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Name: Optional[constr(min_length=1, max_length=350)] = Field(
        None,
        description='Name by which a party is known and which is usually used to identify that party.',
    )
    PostalAddress: Optional[OBPostalAddress6] = None


class Initiation22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ChargeBearer: Optional[OBChargeBearerType1Code] = None
    Creditor: Optional[Creditor7] = Field(
        None, description='Party to which an amount of money is due.'
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorAgent_1: Optional[CreditorAgent] = Field(
        None,
        alias='CreditorAgent',
        description='Financial institution servicing an account for the creditor.',
    )
    CurrencyOfTransfer: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.",
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    DestinationCountryCode: Optional[constr(pattern=r'[A-Z]{2,2}')] = Field(
        None,
        description='Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).',
    )
    EndToEndIdentification: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    ExchangeRateInformation: Optional[ExchangeRateInformation9] = Field(
        None, description='Provides details on the currency exchange rate and contract.'
    )
    ExtendedPurpose: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    InstructionPriority_1: Optional[InstructionPriority] = Field(
        None,
        alias='InstructionPriority',
        description='Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    Purpose: Optional[constr(min_length=1, max_length=4)] = Field(
        None,
        description='Specifies the external purpose code in the format of character string with a maximum length of 4 characters.\nThe list of valid codes is an external code list published separately.\nExternal code sets can be downloaded from www.iso20022.org.',
    )
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    RequestedExecutionDateTime: datetime = Field(
        ...,
        description="Date at which the initiating party requests the clearing agent to process the payment. \nUsage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data23(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation: Optional[Authorisation11] = Field(
        None, description='The authorisation type request from the TPP.'
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    CutOffDateTime: Optional[datetime] = Field(
        None,
        description='Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    ExchangeRateInformation: Optional[ExchangeRateInformation8] = Field(
        None,
        description='Further detailed information on the exchange rate that has been used in the payment transaction.',
    )
    ExpectedExecutionDateTime: Optional[datetime] = Field(
        None,
        description='Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    ExpectedSettlementDateTime: Optional[datetime] = Field(
        None,
        description='Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Initiation: Initiation22 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.',
    )
    Permission_1: Permission = Field(
        ...,
        alias='Permission',
        description='Specifies the Open Banking service request types.',
    )
    ReadRefundAccount_1: Optional[ReadRefundAccount] = Field(
        None,
        alias='ReadRefundAccount',
        description='Specifies to share the refund account details with PISP',
    )
    SCASupportData: Optional[OBSCASupportData1] = None
    Status: Status15 = Field(
        ..., description='Specifies the status of consent resource in code form.'
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteInternationalScheduledConsentResponse6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data23
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')
    Risk: OBRisk1


class Creditor8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Name: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Name by which a party is known and which is usually used to identify that party.',
    )
    PostalAddress: Optional[OBPostalAddress6] = None


class Initiation23(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ChargeBearer: Optional[OBChargeBearerType1Code] = None
    Creditor: Optional[Creditor8] = Field(
        None, description='Party to which an amount of money is due.'
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.',
    )
    CreditorAgent_1: Optional[CreditorAgent] = Field(
        None,
        alias='CreditorAgent',
        description='Financial institution servicing an account for the creditor.',
    )
    CurrencyOfTransfer: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.",
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    DestinationCountryCode: Optional[constr(pattern=r'[A-Z]{2,2}')] = Field(
        None,
        description='Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).',
    )
    EndToEndIdentification: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.\nUsage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.\nOB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.',
    )
    ExchangeRateInformation: Optional[ExchangeRateInformation11] = Field(
        None, description='Provides details on the currency exchange rate and contract.'
    )
    ExtendedPurpose: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    InstructionIdentification: constr(min_length=1, max_length=35) = Field(
        ...,
        description='Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.\nUsage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.',
    )
    InstructionPriority_1: Optional[InstructionPriority] = Field(
        None,
        alias='InstructionPriority',
        description='Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.',
    )
    LocalInstrument: Optional[OBExternalLocalInstrument1Code] = None
    Purpose: Optional[constr(min_length=1, max_length=4)] = Field(
        None,
        description='Specifies the external purpose code in the format of character string with a maximum length of 4 characters.\nThe list of valid codes is an external code list published separately.\nExternal code sets can be downloaded from www.iso20022.org.',
    )
    RemittanceInformation_1: Optional[RemittanceInformation] = Field(
        None,
        alias='RemittanceInformation',
        description="Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.",
    )
    RequestedExecutionDateTime: datetime = Field(
        ...,
        description="Date at which the initiating party requests the clearing agent to process the payment. \nUsage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Refund4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Account_1: Account = Field(
        ..., alias='Account', description='Provides the details to identify an account.'
    )
    Agent_1: Optional[Agent] = Field(
        None,
        alias='Agent',
        description='Set of elements used to uniquely and unambiguously identify a financial institution or a branch of a financial institution.',
    )
    Creditor: Optional[Creditor8] = Field(
        None,
        description='Set of elements used to identify a person or an organisation.',
    )


class Data24(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    ExchangeRateInformation: Optional[ExchangeRateInformation10] = Field(
        None,
        description='Further detailed information on the exchange rate that has been used in the payment transaction.',
    )
    ExpectedExecutionDateTime: Optional[datetime] = Field(
        None,
        description='Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    ExpectedSettlementDateTime: Optional[datetime] = Field(
        None,
        description='Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Initiation: Initiation23 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.',
    )
    InternationalScheduledPaymentId: constr(min_length=1, max_length=40) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the international scheduled payment resource.',
    )
    MultiAuthorisation: Optional[MultiAuthorisation5] = Field(
        None, description='The multiple authorisation flow response from the ASPSP.'
    )
    Refund: Optional[Refund4] = None
    Status: Status17 = Field(
        ..., description='Specifies the status of the payment order resource.'
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteInternationalScheduledResponse6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data24
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')


class Creditor10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Name: Optional[constr(min_length=1, max_length=350)] = Field(
        None,
        description='Name by which a party is known and which is usually used to identify that party.',
    )
    PostalAddress: Optional[OBPostalAddress6] = None


class CreditorAgent8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Identification: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Unique and unambiguous identification of the servicing institution.',
    )
    Name_1: Optional[Name] = Field(None, alias='Name')
    PostalAddress: Optional[OBPostalAddress6] = None
    SchemeName: Optional[OBExternalFinancialInstitutionIdentification4Code] = None


class Initiation24(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ChargeBearer: Optional[OBChargeBearerType1Code] = None
    Creditor: Optional[Creditor10] = Field(
        None, description='Party to which an amount of money is due.'
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Provides the details to identify the beneficiary account.',
    )
    CreditorAgent: Optional[CreditorAgent8] = Field(
        None,
        description='Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.\nThis is the servicer of the beneficiary account.',
    )
    CurrencyOfTransfer: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.",
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Provides the details to identify the debtor account.',
    )
    DestinationCountryCode: Optional[constr(pattern=r'[A-Z]{2,2}')] = Field(
        None,
        description='Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).',
    )
    ExtendedPurpose: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.',
    )
    FinalPaymentDateTime: Optional[datetime] = Field(
        None,
        description='The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    FirstPaymentDateTime: datetime = Field(
        ...,
        description='The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Frequency: constr(
        pattern=r'^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$'
    ) = Field(
        ...,
        description='Individual Definitions:\nEvryDay - Every day\nEvryWorkgDay - Every working day\nIntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)\nWkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)\nIntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)\nQtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). \nENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. \nSCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.\nRECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. \nIndividual Patterns:\nEvryDay (ScheduleCode)\nEvryWorkgDay (ScheduleCode)\nIntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)\nWkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)\nIntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)\nQtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay\nThe regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:\nEvryDay\nEvryWorkgDay\nIntrvlWkDay:0[1-9]:0[1-7]\nWkInMnthDay:0[1-5]:0[1-7]\nIntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])\nQtrDay:(ENGLISH|SCOTTISH|RECEIVED)\nFull Regular Expression:\n^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    NumberOfPayments: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.',
    )
    Purpose: Optional[constr(min_length=1, max_length=4)] = Field(
        None,
        description='Specifies the external purpose code in the format of character string with a maximum length of 4 characters.\nThe list of valid codes is an external code list published separately.\nExternal code sets can be downloaded from www.iso20022.org.',
    )
    Reference: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description="Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.\nUsage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.\nIf the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data25(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    Initiation: Initiation24 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.',
    )


class OBWriteInternationalStandingOrder4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data25
    Risk: OBRisk1


class Initiation25(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ChargeBearer: Optional[OBChargeBearerType1Code] = None
    Creditor: Optional[Creditor10] = Field(
        None, description='Party to which an amount of money is due.'
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Provides the details to identify the beneficiary account.',
    )
    CreditorAgent: Optional[CreditorAgent8] = Field(
        None,
        description='Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.\nThis is the servicer of the beneficiary account.',
    )
    CurrencyOfTransfer: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.",
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Provides the details to identify the debtor account.',
    )
    DestinationCountryCode: Optional[constr(pattern=r'[A-Z]{2,2}')] = Field(
        None,
        description='Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).',
    )
    ExtendedPurpose: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.',
    )
    FinalPaymentDateTime: Optional[datetime] = Field(
        None,
        description='The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    FirstPaymentDateTime: datetime = Field(
        ...,
        description='The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Frequency: constr(
        pattern=r'^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$'
    ) = Field(
        ...,
        description='Individual Definitions:\nEvryDay - Every day\nEvryWorkgDay - Every working day\nIntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)\nWkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)\nIntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)\nQtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). \nENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. \nSCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.\nRECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. \nIndividual Patterns:\nEvryDay (ScheduleCode)\nEvryWorkgDay (ScheduleCode)\nIntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)\nWkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)\nIntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)\nQtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay\nThe regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:\nEvryDay\nEvryWorkgDay\nIntrvlWkDay:0[1-9]:0[1-7]\nWkInMnthDay:0[1-5]:0[1-7]\nIntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])\nQtrDay:(ENGLISH|SCOTTISH|RECEIVED)\nFull Regular Expression:\n^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    NumberOfPayments: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.',
    )
    Purpose: Optional[constr(min_length=1, max_length=4)] = Field(
        None,
        description='Specifies the external purpose code in the format of character string with a maximum length of 4 characters.\nThe list of valid codes is an external code list published separately.\nExternal code sets can be downloaded from www.iso20022.org.',
    )
    Reference: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description="Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.\nUsage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.\nIf the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data26(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation: Optional[Authorisation12] = Field(
        None, description='The authorisation type request from the TPP.'
    )
    Initiation: Initiation25 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.',
    )
    Permission_1: Permission = Field(
        ...,
        alias='Permission',
        description='Specifies the Open Banking service request types.',
    )
    ReadRefundAccount_1: Optional[ReadRefundAccount] = Field(
        None,
        alias='ReadRefundAccount',
        description='Specifies to share the refund account details with PISP',
    )
    SCASupportData: Optional[OBSCASupportData1] = None


class OBWriteInternationalStandingOrderConsent6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data26
    Risk: OBRisk1


class Initiation26(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ChargeBearer: Optional[OBChargeBearerType1Code] = None
    Creditor: Optional[Creditor10] = Field(
        None, description='Party to which an amount of money is due.'
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Provides the details to identify the beneficiary account.',
    )
    CreditorAgent: Optional[CreditorAgent8] = Field(
        None,
        description='Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.\nThis is the servicer of the beneficiary account.',
    )
    CurrencyOfTransfer: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.",
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    DestinationCountryCode: Optional[constr(pattern=r'[A-Z]{2,2}')] = Field(
        None,
        description='Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).',
    )
    ExtendedPurpose: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.',
    )
    FinalPaymentDateTime: Optional[datetime] = Field(
        None,
        description='The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    FirstPaymentDateTime: datetime = Field(
        ...,
        description='The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Frequency: constr(
        pattern=r'^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$'
    ) = Field(
        ...,
        description='Individual Definitions:\nEvryDay - Every day\nEvryWorkgDay - Every working day\nIntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)\nWkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)\nIntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)\nQtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). \nENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. \nSCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.\nRECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. \nIndividual Patterns:\nEvryDay (ScheduleCode)\nEvryWorkgDay (ScheduleCode)\nIntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)\nWkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)\nIntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)\nQtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay\nThe regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:\nEvryDay\nEvryWorkgDay\nIntrvlWkDay:0[1-9]:0[1-7]\nWkInMnthDay:0[1-5]:0[1-7]\nIntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])\nQtrDay:(ENGLISH|SCOTTISH|RECEIVED)\nFull Regular Expression:\n^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    NumberOfPayments: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.',
    )
    Purpose: Optional[constr(min_length=1, max_length=4)] = Field(
        None,
        description='Specifies the external purpose code in the format of character string with a maximum length of 4 characters.\nThe list of valid codes is an external code list published separately.\nExternal code sets can be downloaded from www.iso20022.org.',
    )
    Reference: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description="Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.\nUsage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.\nIf the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Data27(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Authorisation: Optional[Authorisation13] = Field(
        None, description='The authorisation type request from the TPP.'
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    CutOffDateTime: Optional[datetime] = Field(
        None,
        description='Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    Initiation: Initiation26 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.',
    )
    Permission_1: Permission = Field(
        ...,
        alias='Permission',
        description='Specifies the Open Banking service request types.',
    )
    ReadRefundAccount_1: Optional[ReadRefundAccount] = Field(
        None,
        alias='ReadRefundAccount',
        description='Specifies to share the refund account details with PISP',
    )
    SCASupportData: Optional[OBSCASupportData1] = None
    Status: Status18 = Field(
        ..., description='Specifies the status of resource in code form.'
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteInternationalStandingOrderConsentResponse7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data27
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')
    Risk: OBRisk1


class Initiation27(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ChargeBearer: Optional[OBChargeBearerType1Code] = None
    Creditor: Optional[Creditor10] = Field(
        None, description='Party to which an amount of money is due.'
    )
    CreditorAccount_1: CreditorAccount = Field(
        ...,
        alias='CreditorAccount',
        description='Provides the details to identify the beneficiary account.',
    )
    CreditorAgent: Optional[CreditorAgent8] = Field(
        None,
        description='Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.\nThis is the servicer of the beneficiary account.',
    )
    CurrencyOfTransfer: constr(pattern=r'^[A-Z]{3,3}$') = Field(
        ...,
        description="Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.",
    )
    DebtorAccount_1: Optional[DebtorAccount] = Field(
        None,
        alias='DebtorAccount',
        description='Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.',
    )
    DestinationCountryCode: Optional[constr(pattern=r'[A-Z]{2,2}')] = Field(
        None,
        description='Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).',
    )
    ExtendedPurpose: Optional[constr(min_length=1, max_length=140)] = Field(
        None,
        description='Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.',
    )
    FinalPaymentDateTime: Optional[datetime] = Field(
        None,
        description='The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    FirstPaymentDateTime: datetime = Field(
        ...,
        description='The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Frequency: constr(
        pattern=r'^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$'
    ) = Field(
        ...,
        description='Individual Definitions:\nEvryDay - Every day\nEvryWorkgDay - Every working day\nIntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)\nWkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)\nIntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)\nQtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). \nENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. \nSCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.\nRECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. \nIndividual Patterns:\nEvryDay (ScheduleCode)\nEvryWorkgDay (ScheduleCode)\nIntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)\nWkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)\nIntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)\nQtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay\nThe regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:\nEvryDay\nEvryWorkgDay\nIntrvlWkDay:0[1-9]:0[1-7]\nWkInMnthDay:0[1-5]:0[1-7]\nIntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])\nQtrDay:(ENGLISH|SCOTTISH|RECEIVED)\nFull Regular Expression:\n^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$',
    )
    InstructedAmount_1: InstructedAmount = Field(
        ...,
        alias='InstructedAmount',
        description='Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.',
    )
    NumberOfPayments: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description='Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.',
    )
    Purpose: Optional[constr(min_length=1, max_length=4)] = Field(
        None,
        description='Specifies the external purpose code in the format of character string with a maximum length of 4 characters.\nThe list of valid codes is an external code list published separately.\nExternal code sets can be downloaded from www.iso20022.org.',
    )
    Reference: Optional[constr(min_length=1, max_length=35)] = Field(
        None,
        description="Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.\nUsage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.\nIf the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.",
    )
    SupplementaryData: Optional[OBSupplementaryData1] = None


class Refund5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Account_1: Account = Field(
        ..., alias='Account', description='Provides the details to identify an account.'
    )
    Agent_1: Optional[Agent] = Field(
        None,
        alias='Agent',
        description='Set of elements used to uniquely and unambiguously identify a financial institution or a branch of a financial institution.',
    )
    Creditor: Optional[Creditor10] = Field(
        None,
        description='Set of elements used to identify a person or an organisation.',
    )


class Data28(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Charges: Optional[List[Charge]] = None
    ConsentId: constr(min_length=1, max_length=128) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.',
    )
    CreationDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )
    Debtor: Optional[OBCashAccountDebtor4] = None
    Initiation: Initiation27 = Field(
        ...,
        description='The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.',
    )
    InternationalStandingOrderId: constr(min_length=1, max_length=40) = Field(
        ...,
        description='OB: Unique identification as assigned by the ASPSP to uniquely identify the international standing order resource.',
    )
    MultiAuthorisation: Optional[MultiAuthorisation6] = Field(
        None, description='The multiple authorisation flow response from the ASPSP.'
    )
    Refund: Optional[Refund5] = None
    Status: Status20 = Field(
        ..., description='Specifies the status of resource in code form.'
    )
    StatusUpdateDateTime: datetime = Field(
        ...,
        description='Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00',
    )


class OBWriteInternationalStandingOrderResponse7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    Data: Data28
    Links_1: Optional[Links] = Field(None, alias='Links')
    Meta_1: Optional[Meta] = Field(None, alias='Meta')
